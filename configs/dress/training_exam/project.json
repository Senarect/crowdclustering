{
    "public_name": "Dress clustering (training and exam)",
    "public_description": "Group dresses by it's design",
    "task_spec": {
        "input_spec": {
            "images": {
                "required": true,
                "hidden": false,
                "min_size": 1,
                "type": "array_json"
            },
            "instructions": {
                "required": false,
                "hidden": false,
                "type": "string"
            }
        },
        "output_spec": {
            "result": {
                "required": false,
                "hidden": false,
                "type": "json"
            }
        },
        "view_spec": {
            "settings": {
                "permissions": [],
                "showFinish": true,
                "showFullscreen": true,
                "showInstructions": true,
                "showMessage": true,
                "showReward": true,
                "showSkip": true,
                "showSubmit": true,
                "showTimer": true,
                "showTitle": true
            },
            "script": "const GROUPS = [\n  { 'group':  1, 'color': '#22b14c', 'hotkey': '1', 'font': 'white' },\n  { 'group':  2, 'color': '#b5e61d', 'hotkey': '2', 'font': 'black' },\n  { 'group':  3, 'color': '#3f48cc', 'hotkey': '3', 'font': 'white' },\n  { 'group':  4, 'color': '#00ffff', 'hotkey': '4', 'font': 'black' },\n  { 'group':  5, 'color': '#ff7f27', 'hotkey': '5', 'font': 'black' },\n  { 'group':  6, 'color': '#fff200', 'hotkey': '6', 'font': 'black' },\n  { 'group':  7, 'color': '#880015', 'hotkey': '7', 'font': 'white' },\n  { 'group':  8, 'color': '#ed1c24', 'hotkey': '8', 'font': 'white' },\n];\nconst transparent = 'rgba(0, 0, 0, 0)';\n\nexports.Task = extend(TolokaHandlebarsTask, function (options) {\n  TolokaHandlebarsTask.call(this, options);\n}, {\n  getUrl: function (path) {\n    try {\n      let url = new URL(path);\n      if (!!url && !!url.hostname) return path;\n    } catch (_) {\n      // ignore \n    }\n    try {\n      return this.getProxyUrl(path);\n    } catch (_) {\n      return path;\n    }\n  },\n\n  getTemplateData: function() {\n    let data = TolokaHandlebarsTask.prototype.getTemplateData.call(this);\n\n    const\n      that = this,\n      output = this.getSolution().output_values || {};\n    \n    if (!_.isArray(data.images)) {\n      data.images = !!data.images ? [String(data.images)] : [];\n    }\n\n    data.images = _.map(_.filter(data.images, i => !!i && String(i).trim().length > 0), i => {\n      return {\"image\": that.getUrl(i.trim()), \"group\": null}\n    });\n\n    let current = this.current || GROUPS[0].group;\n    if (!output.current) {\n      this.setSolutionOutputValues({\n        \"result\": output.result || [],\n        \"current\": current\n      });\n    } else {\n      this.current = (current = output.current);\n    }\n\n    if (!this.current) this.current = current;\n\n    data.groups = [];\n    for (let i = 0; i < GROUPS.length + 1; i += 2) {\n      if (i < GROUPS.length) {\n        let left = GROUPS[i];\n        left.selected = (i === (this.current - 1)) ? ' selected' : '';\n        left.corner = (i == 0) ? 'border-radius:4px 0 0 0' : '';\n        let right = (i + 1 < GROUPS.length) ? GROUPS[i + 1] : null;\n        right.corner = (i == 0) ? 'border-radius: 0 4px 0 0' : '';\n        if (!!right) {\n          right.selected = ((i + 1) === (this.current - 1)) ? ' selected' : '';\n        }\n        data.groups.push({\n          'left': left, 'right': right\n        });\n      }\n    }\n\n    if (data.groups.length > 0) {\n      if (data.groups.length == 1) {\n        data.groups[data.groups.length - 1].left.corner = 'border-radius: 4px 0 0 4px';\n        data.groups[data.groups.length - 1].right.corner = 'border-radius: 0 4px 4px 0';\n      } else {\n        data.groups[data.groups.length - 1].left.corner = 'border-radius: 0 0 0 4px';\n        data.groups[data.groups.length - 1].right.corner = 'border-radius: 0 0 4px 0';\n      }\n    }\n\n    return data;\n  },\n\n  onKey: function(key) {\n    const\n      k = String(key).trim().toLowerCase(),\n      $root = $(this.getDOMElement()),\n      options = this.getWorkspaceOptions(),\n      review = options.isReadOnly || options.isReviewMode;\n    \n    if (!review) {\n      this.changeColor($root.find('.colorCell[data-key=\"' + k + '\"]'));\n    }\n\n    TolokaHandlebarsTask.prototype.onKey.call(this, key);\n  },\n\n  changeColor: function ($colorNode) {\n    if (!$colorNode || $colorNode.length == 0) return;\n    const $root = $(this.getDOMElement());\n    $root.find('.colorCell').removeClass('selected');\n    $colorNode.addClass('selected');\n    this.current = $colorNode.data('num');\n    const output = this.getSolution().output_values || {};\n    this.setSolutionOutputValues({\n      'result': output.result || [],\n      'current': this.current\n    });\n  },\n\n  onRender: function() {\n    this.rendered = true;\n\n    const\n      that = this,\n      $dom = $(this.getDOMElement()),\n      options = this.getWorkspaceOptions(),\n      review = options.isReadOnly || options.isReviewMode;\n\n    const renderImages = () => {\n      return new Promise((resolve, reject) => {\n        if (!that.rendered) {\n          resolve(); \n          return;\n        }\n\n        const\n          images = that.getTask().input_values.images,\n          $root = $(that.getDOMElement()),\n          $container = $root.find('.images'),\n          ovr = (that.getSolution().output_values || {}).result;\n        \n        $container.empty();\n\n        if (!_.isArray(images) || images.length <= 0) {\n          return;\n        }\n\n        const\n          N = images.length,\n          w = $container.width(),\n          h = $container.height();\n        // let m = 2;\n        let m = Math.floor(Math.sqrt(N));\n        let n = Math.round(N / m);\n\n        if (m <= 0) {\n          m = 1; n = N;\n        } else if (n <= 0) {\n          m = N; n = 1;\n        }\n\n        while (m * n < N) {\n          if (w >= h) { n += 1; } else { m += 1; }\n        }\n\n        let k = 0;\n        const hi = String(100.0 / m) + '%';\n        const wi = String(100.0 / n) + '%';\n\n        for (var j = 0; j < m; j++) {\n          if (k >= N) break;\n\n          let $ir = $(\"<div/>\", {\n            \"class\": \"imageRow\",\n            css: { height: hi,  }\n          });\n\n          for (var i = 0; i < n; i++) {\n            let $ic = $(\"<div/>\", {\n              \"class\": \"imageCell\",\n              css: { width: wi }\n            });\n            if (k < N) {\n              let $img = $('<img/>', {\n                alt: \"\",\n                src: images[k].image,\n                on: {\n                  load: function(el) {\n                    const\n                      iel = el.target,\n                      $pel = $(el.target).parent(),\n                      ih = iel.naturalHeight,\n                      iw = iel.naturalWidth,\n                      ph = $pel.height(),\n                      pw = $pel.width();\n                    if (iw > 0 && ih > 0) {\n                      const scale = Math.min(pw / iw, ph / ih);\n                      if (ih * scale < ph) {\n                        iel.style.width = 'calc(100% - 10px)';\n                        iel.style.height = 'auto';\n                      } else {\n                        iel.style.width = 'auto';\n                        iel.style.height = 'calc(100% - 10px)';\n                      }\n                    }\n                  }\n                }\n              });\n              const oi = _.find(ovr, r => r.image === images[k].image);\n              if (!!oi) {\n                $img.attr('data-num', oi.group || null);\n                const gg = _.find(GROUPS, g => g.group === oi.group);\n                if (!!gg) {\n                  $img.css('background-color', gg.color);\n                  $img.css('border-color', gg.color);\n                }\n              }\n              if (!review) {\n                $img.on('click', function (e) {        \n                  if (!!that.current) {\n                    const\n                      $img = $(e.target),\n                      group = _.find(GROUPS, g => g.group === that.current);\n                    if (!!group) {\n                      const color = group.color;\n                      let num = $img.attr('data-num');\n                      if (!!num) num = parseInt(num, 10);\n                      let bgc = $img.css('background-color');\n                      let brc = $img.css('border-color');\n                      if (bgc == transparent || brc == transparent || num != that.current) {\n                        $img.css('background-color', color);\n                        $img.css('border-color', color);\n                        $img.attr('data-num', that.current);\n                      } else {\n                        $img.css('background-color', transparent);\n                        $img.css('border-color', transparent);\n                        $img.attr('data-num', null);\n                      }\n\n                      const ov = {\n                        'result': [],\n                        'current': that.current\n                      };\n                      $root.find('.imageCell img').each(function (idx, el) {\n                        let g = $(this).attr('data-num');\n                        if (!!g) g = parseInt(g, 10);\n                        ov.result.push({\n                          // 'image': $(this).attr('src'),\n                          'group': g || null \n                        });\n                      });\n                      that.setSolutionOutputValues(ov);\n                    }\n                  }\n                });\n              }\n              $ic.append($img);\n            }\n            $ir.append($ic);\n            k++;\n          }\n          \n          $container.append($ir);\n        }\n\n        resolve();\n      });\n    };\n\n    renderImages().catch(err => console.error(err));\n    this.renderImages = renderImages;\n\n    if (!review) {\n      $dom.find('.colorCell').on('click', e => that.changeColor.call(that, $(e.target)));\n    }\n  },\n\n    addError: function addError(message, field, errors) {\n        errors || (errors = {\n            task_id: this.getOptions().task.id,\n            errors: {},\n        });\n        errors.errors[field] = {\n            message: message,\n        };\n\n        return errors;\n    },\n\n    validate: function validate(solution) {\n        var errors = null;\n\n        const images = this.getTask().input_values.images;\n\n        this.hideTaskError();\n\n        if (!solution.output_values.result || (images.length > 0 && solution.output_values.result.length == 0) || _.some(solution.output_values.result, r => !r.group)) {\n          errors = this.addError('Please, label all images.', '__TASK__', errors);\n        }\n\n        if (!errors) {\n          delete solution.output_values.current;\n        }\n\n        return errors;\n    }\n});\n\nexports.TaskSuite = extend(TolokaHandlebarsTaskSuite, function (options) {\n  TolokaHandlebarsTaskSuite.call(this, options);\n}, {\n  onRender: function() {\n    window.onresize = () => {\n      for (const t of this.getTasks()) {\n        t.renderImages.call(t).catch(err => console.error(err));\n      }\n    }\n  }\n});\n\nfunction extend(ParentClass, constructorFunction, prototypeHash) {\n  constructorFunction = constructorFunction || function () {};\n  prototypeHash = prototypeHash || {};\n  if (ParentClass) {\n    constructorFunction.prototype = Object.create(ParentClass.prototype);\n  }\n  for (var i in prototypeHash) {\n    constructorFunction.prototype[i] = prototypeHash[i];\n  }\n  return constructorFunction;\n}\n\n",
            "markup": "<div class=\"images\">\r\n    <h3>\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438!</h3>\r\n</div>\r\n<div class=\"groupsAndHelp\">\r\n    <div class=\"colors\">\r\n        {{#each groups}}\r\n        <div class=\"colorsRow\">\r\n            <div class=\"colorCell{{this.left.selected}}\" data-num=\"{{this.left.group}}\" data-key=\"{{this.left.hotkey}}\" style=\"background-color:{{this.left.color}};color:{{this.left.font}};float:left;{{this.left.corner}}\">{{this.left.hotkey}}</div>\r\n            {{#if this.right}}\r\n            <div class=\"colorCell{{this.right.selected}}\" data-num=\"{{this.right.group}}\" data-key=\"{{this.right.hotkey}}\" style=\"background-color:{{this.right.color}};color:{{this.right.font}};float:right;{{this.right.corner}}\">{{this.right.hotkey}}</div>\r\n            {{else}}\r\n            <div class=\"colorCell empty\"></div>\r\n            {{/if}}\r\n        </div>\r\n        {{/each}}\r\n    </div>\r\n    <div class=\"help\">\r\n        <span style=\"font-weight:bold\">Instructions</span>\r\n        <!-- \u041d\u0438\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e -->\r\n        <p>\r\n            {{{instructions}}}\r\n        </p>\r\n    </div>\r\n</div>",
            "styles": ".task-suite {\n    padding: 0;\n    margin: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden !important;\n}\n\n.task {\n    padding: 5px;\n    margin: 0;\n    overflow: hidden;\n    width: 100%;\n    height: 100%;\n}\n\n.task__error {\n  position: absolute;\n  z-index: 1;\n  top: 0px;\n  left: 0px;\n  width: calc(100% - 18px);\n}\n\n.images, .groupsAndHelp {\n    height: 100%;\n}\n\n.groupsAndHelp {\n    float: right;\n    width: 200px;\n    padding-left: 5px;\n    border-left: 1px solid lightgrey;\n    overflow: hidden;\n}\n\n.images {\n    overflow: hidden !important;\n    float: left;\n    width: calc(100% - 211px);\n    padding-right: 5px;\n    vertical-align: top;\n    text-align: center;\n    margin: auto;\n}\n\n.imageRow {\n  width: 100%;\n  flex-grow: 10;\n  display: flex;\n  justify-content: space-between;\n  vertical-align: middle;\n  text-align: center;\n}\n\n.imageCell {\n  vertical-align: middle;\n  text-align: center;\n  margin: 5px;\n  position: relative;\n  height: calc(100% - 10px);\n}\n\n.imageCell img {\n  /* width: calc(100% - 10px);\n  height: calc(100% - 10px);\n  object-fit: contain; */\n  max-width: calc(100% - 10px) !important;\n  max-height: calc(100% - 10px) !important;\n  border: 8px solid transparent;\n  background-color: transparent;\n  border-radius: 3px;\n  cursor: pointer;\n  object-fit: contain;\n}\n\n.help {\n  overflow: auto;\n  height: calc(100% - 235px);\n  margin-top: 5px;\n  white-space: normal;\n  word-break: break-word;\n}\n\n.colors, .help {\n  width: 100%;\n}\n\n.colors {\n  width: 80%;\n  margin: auto;\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n\n.colors .colorsRow {\n  width: 100%;\n  height: 40px;\n}\n\n.colors .colorCell {\n  height: calc(100% - 6px);\n  width: calc(50% - 6px);\n  display: flex;\n  align-items: center; \n  justify-content: center;\n  margin: auto;\n  border: 3px solid transparent;\n  cursor: pointer;\n}\n\n.colors .colorCell.selected {\n  border-color: black;\n  font-size: 1.5em;\n  font-weight: bold;\n}\n\n.colors .colorCell.empty {\n  cursor: default;\n  user-select: none;\n  pointer-events: none;\n}",
            "assets": {
                "style_urls": [],
                "script_urls": [
                    "$TOLOKA_ASSETS/js/toloka-handlebars-templates.js"
                ]
            },
            "type": "classic"
        }
    },
    "assignments_issuing_type": "AUTOMATED",
    "assignments_automerge_enabled": false,
    "public_instructions": "<div>This is the exam. You have to label dresses without written criteria.</div><div><span style=\"font-weight:700\">There is post-acceptance,</span>\u00a0answers are checked within 12 hours<i>.</i></div><div><u><span style=\"font-weight:700\"><font color=\"#009f00\">Read the rules carefully and look at the examples.</font></span></u><br /></div><div><br /></div>Look at the\u00a0<span style=\"font-weight:700\">dress\u00a0</span>in the pictures.\u00a0You need to\u00a0<b>group them by style\u00a0using color labels</b>.<div><div><div><h2>How to define &#34;<b>style</b>&#34;?</h2></div><div><span style=\"font-weight:700\">Style\u00a0</span>means shape, design, tailoring. But\u00a0<span style=\"font-weight:700\"><u><font color=\"#ff0000\">not color</font></u></span>.</div><div>There is no need to look into the details and divide them too carefully. Also, you can not group dresses only by their silhouette.</div><div><br /></div><div><br /></div><div><b>To summarize</b>, you have to divide dresses by design. Design means tailoring, form, style. <b><font color=\"#df0000\">Do not\u00a0 use color as a criterion to group dresses.</font></b></div><h2>Task Interface</h2><div>You will see several pictures and color panel (see the screenshot below).\u00a0<font color=\"#000000\"><span style=\"font-weight:700\">You should mark similar dresses with the same colors.</span></font><span style=\"font-weight:700\"><font color=\"#00bf00\">\u00a0</font></span></div><div><span style=\"font-weight:700\"><font color=\"#00bf00\"><br /></font></span></div><div><i><b><u>Note</u></b>: If you don&#39;t see a color panel like on the screenshot, ensure that you have default zoom on the page (ctrl&#43;0 to set it up).</i></div><div><br /></div><div>Example of groups:</div><div><img alt=\"\" /><img alt=\"\" src=\"https://ic.wampi.ru/2021/09/07/image24cdb947a20fbf71.png\" /><br /></div><div><h1><span style=\"font-weight:700\"><font color=\"#009f27\">Key things</font></span></h1></div></div><div><ul><li>There might be cases where a group has only one image.\u00a0Most likely, there will be only such cases.</li><li><font color=\"#000000\">Use hotkeys</font><font color=\"#000000\">\u00a0to speed up the work.</font></li><li><font color=\"#000000\">You do not have to use all ten<b>\u00a0</b>colors.</font></li></ul></div></div>"
}